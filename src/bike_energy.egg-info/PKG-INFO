Metadata-Version: 2.4
Name: bike_energy
Version: 1.0.0
Summary: Simulate cyclist energy consumption on road segments
Author: Alexander Gustafsson & Eddie Tunas Ericson
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: gpxpy
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: pyyaml
Requires-Dist: pyproj
Requires-Dist: scipy

# Bike Energy Model

This project simulates and analyzes cyclist energy consumption over road segments using GPX track data. It includes tools for both route-based energy simulation and synthetic profile optimization of cycle paths.

## Features

- **Energy Simulation**: Core library to compute cyclist energy, time, speed, and distance based on GPX input and physical models.
- **Optimization Script**: `run_optimization_algo.py` generates synthetic profile variations (over/under highway) and compares energy/time results.
- **Parameter Configuration**: Flexible parameters via `params.yaml` and `params_optpimization.py` for model constants and optimization tunables.
- **CLI Tools**: Easy-to-use entry points for running simulations and saving JSON outputs.
- **Plotting**: Automatic visualization of route profiles, histograms, and summary boxplots.

## Project Structure

```
├── bike_energy/                 # Core package
│   ├── __init__.py              # Package metadata (version, author)
│   ├── config.py                # Load and parse `params.yaml`
│   ├── controller.py            # Main simulation controller
│   ├── map_data.py              # GPX parsing and distance/slope computation
│   ├── free_rolling.py          # Free-rolling slope analysis
│   ├── power_models.py          # Power input/output/deceleration models
│   ├── speed_control.py         # Speed reduction logic (crossroads, cornering)
│   ├── simulator.py             # Core simulation loop
├── data/raw/                    # Directory for GPX input files
├── params.yaml                  # Simulation and model configuration
├── params_optpimization.py      # Tunable parameters for optimization script
├── pyproject.toml               # Packaging metadata
├── requirements.txt             # Python dependencies
├── run.py                       # CLI runner for energy simulation
├── run_optimization_algo.py     # Script to run synthetic profile optimization
└── README.md                    # Project overview and usage
```

## Installation

Ensure Python >= 3.8 and install dependencies:

```bash
pip install .            # Install as package
# or for development:
pip install -e .
```

## Configuration

1. **Simulation Parameters**: Modify `params.yaml` to adjust physical constants, environment (temperature), VO₂max distributions, weight models, rolling resistance, aerodynamic drag values, and map GPX file settings.
2. **Optimization Parameters**: `params_optpimization.py` contains geometry settings for synthetic profiles (e.g., `highway_width`, `max_slope`), rider/bike model tunables (`power`, `mass`, `c_r`, `cwxA`), and discretization details (`n_curve`, `n_flat`).

## Usage

### 1. Energy Simulation

Run the core simulation on a GPX route:

```bash
python run.py             # prints summary to stdout
python run.py -o out.json # saves results to `out.json`
```

Outputs:
- Console summary of min, median, mean, and max for speed, energy, time, and distance for women and men.
- Plots (histograms and boxplots) showing distributions.

### 2. Synthetic Profile Optimization

Generate and compare synthetic over/under highway profiles:

```bash
python run_optimization_algo.py
```

This script:
- Reads tunables from `params_optpimization.py` and core constants from `bike_energy/config.py`.
- Generates two synthetic profiles (over and under the highway) based on geometry and slope parameters.
- Simulates one-way and round-trip energy, time, distance, and average speed for both profiles.
- Prints results and plots the height profiles.

## Output Interpretation

- **Energy (J)**: Total joules expended.
- **Time (s)**: Total seconds of traversal.
- **Distance (m)**: Route length in meters.
- **Avg Speed (km/h)**: Average velocity in km/h.

Comparisons between over and under profiles help assess design trade-offs (e.g., steeper climb vs. longer path).

## Contributing

Contributions are welcome! Please fork the repository, create a feature branch, and submit a pull request.

## Authors

- Alexander Gustafsson
- Eddie Tunas Ericson

Bachelor Thesis, Vehicle Engineering, KTH 2025
